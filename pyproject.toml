[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "querymind"
version = "0.1.0"
description = "Multi-agent RAG system with ChromaDB, Ollama, and MCP integration"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "QueryMind Team"}
]
keywords = [
    "rag",
    "vector-search",
    "chromadb",
    "ollama",
    "mcp",
    "semantic-search",
    "multi-agent"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Core dependencies
dependencies = [
    # Vector Database & Cache
    "chromadb>=0.4.0",
    "redis>=5.0.0",

    # HTTP Clients
    "requests>=2.31.0",
    "httpx>=0.24.0",

    # LLM & Embeddings
    "torch>=2.0.0",
    "sentence-transformers>=2.2.0",

    # MCP Server
    "fastmcp>=0.2.0",
    "pydantic>=2.0.0",

    # CLI
    "click>=8.1.0",
    "rich>=13.0.0",
    "python-dotenv>=1.0.0",

    # Utilities
    "pyyaml>=6.0.0",
    "python-dateutil>=2.8.0",

    # Feature Flags
    "UnleashClient>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
]

[project.urls]
Homepage = "https://github.com/your-org/querymind"
Documentation = "https://github.com/your-org/querymind/wiki"
Repository = "https://github.com/your-org/querymind"
Issues = "https://github.com/your-org/querymind/issues"

[project.scripts]
querymind = "querymind.cli:main"

[tool.setuptools]
packages = ["querymind", "querymind.core", "querymind.agents", "querymind.mcp"]

[tool.setuptools.package-data]
querymind = ["py.typed"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["."]
addopts = "-v --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
